# -*- coding: utf-8 -*-
"""diabetes .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10zNldMEbrVbkFyfHp0elrnWnWyKuvHRL

#Importing Libraries
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from google.colab import drive
from matplotlib import pyplot as plt
drive.mount('/content/drive')

"""#Loading the Dataset"""

df=pd.read_csv("/content/drive/MyDrive/pj/diabet/diabetes.csv")

"""#Exploring the Dataset"""

print(df.describe())
df.info()
print(df.isnull().sum())
df.dropna(inplace=True)

"""# Preprocessing the Data"""

required_features=['Pregnancies','Glucose',
                   'BloodPressure','SkinThickness',
                   'Insulin','BMI',
                   'DiabetesPedigreeFunction','Age']
output_label='Outcome'

x_train, x_test, y_train, y_test = train_test_split(
df[required_features],
df[output_label],
test_size = 0.3)

"""#Creating the Model and creating types of models with Different parameters to find best score"""

kernels=['linear', 'poly', 'rbf', 'sigmoid' ]
gammas = [0.1, 1, 10, 100]
for kernel in kernels:
    model = SVC(kernel=kernel)
    model.fit(x_train, y_train)
    print("model kernel='",kernel," score is :",(model.score(x_test,y_test))*100)

kernels=[ 'rbf', 'sigmoid' ]
gammas = [0.1, 1, 10, 100]
for kernel in kernels:
  for gamma in gammas:

    model = SVC(kernel=kernel,gamma=gamma)
    model.fit(x_train, y_train)
    print("model kernel='",kernel,"gamma='",gamma,"' score is :",(model.score(x_test,y_test))*100)

gammas = [0.1, 1, 10, 100]
kernels=[ 'rbf', 'sigmoid' ]
cs = [0.1, 1, 10, 100, 1000]
for c in cs:
  for kernel in kernels:
    model=SVC(kernel=kernel, C=c)
    model.fit(x_train, y_train)
    print("model kernel='",kernel,"gamma='",gamma,"' C : '",c,"' score is :",(model.score(x_test,y_test))*100)

degrees = [0, 1, 2, 3, 4, 5, 6]
cs = [0.1, 1, 10, 100, 1000]
for degree in degrees:
  for c in cs :
   model=SVC(kernel='poly', C=c,degree=degree)
   model.fit(x_train, y_train)
   print("model kernel='","poly","' C : '",c,"' score is :",(model.score(x_test,y_test))*100)

model=SVC()
model.fit(x_train,y_train)
print("simpel SVC model score :",(model.score(x_test,y_test))*100)

required_features=['Pregnancies','Glucose',
                   'BloodPressure','SkinThickness',
                   'Insulin','BMI',
                   'DiabetesPedigreeFunction','Age']
output_label='Outcome'

for i in required_features:
  x_train, x_test, y_train, y_test = train_test_split(
  df[f'{i}'].array.reshape(-1, 1),
  df[output_label],
  test_size = 0.3)
  model=SVC()
  model.fit(x_train,y_train)
  score=model.score(x_test,y_test)
  print("features: ",i," model score :",score*100)
  print("___________________________________")

"""# findig the most effective component"""

required_features=['Pregnancies','Glucose',
                   'BloodPressure','SkinThickness',
                   'Insulin','BMI',
                   'DiabetesPedigreeFunction','Age']
n = len(required_features)
print(df[required_features[1]].shape[0])
for i in range(n):
    plt.subplot(1, n + 1, i + 1)
    plt.scatter(np.arange(df[required_features[i]].shape[0]), df[required_features[i]].values)
    plt.title(required_features[i])

plt.show()